{"ast":null,"code":"/*! http://mths.be/jsesc v0.5.0 by @mathias */\n;\n\n(function (root) {\n  // Detect free variables `exports`\n  var freeExports = typeof exports == 'object' && exports; // Detect free variable `module`\n\n  var freeModule = typeof module == 'object' && module && module.exports == freeExports && module; // Detect free variable `global`, from Node.js or Browserified code,\n  // and use it as `root`\n\n  var freeGlobal = typeof global == 'object' && global;\n\n  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n    root = freeGlobal;\n  }\n  /*--------------------------------------------------------------------------*/\n\n\n  var object = {};\n  var hasOwnProperty = object.hasOwnProperty;\n\n  var forOwn = function forOwn(object, callback) {\n    var key;\n\n    for (key in object) {\n      if (hasOwnProperty.call(object, key)) {\n        callback(key, object[key]);\n      }\n    }\n  };\n\n  var extend = function extend(destination, source) {\n    if (!source) {\n      return destination;\n    }\n\n    forOwn(source, function (key, value) {\n      destination[key] = value;\n    });\n    return destination;\n  };\n\n  var forEach = function forEach(array, callback) {\n    var length = array.length;\n    var index = -1;\n\n    while (++index < length) {\n      callback(array[index]);\n    }\n  };\n\n  var toString = object.toString;\n\n  var isArray = function isArray(value) {\n    return toString.call(value) == '[object Array]';\n  };\n\n  var isObject = function isObject(value) {\n    // This is a very simple check, but it’s good enough for what we need.\n    return toString.call(value) == '[object Object]';\n  };\n\n  var isString = function isString(value) {\n    return typeof value == 'string' || toString.call(value) == '[object String]';\n  };\n\n  var isFunction = function isFunction(value) {\n    // In a perfect world, the `typeof` check would be sufficient. However,\n    // in Chrome 1–12, `typeof /x/ == 'object'`, and in IE 6–8\n    // `typeof alert == 'object'` and similar for other host objects.\n    return typeof value == 'function' || toString.call(value) == '[object Function]';\n  };\n  /*--------------------------------------------------------------------------*/\n  // http://mathiasbynens.be/notes/javascript-escapes#single\n\n\n  var singleEscapes = {\n    '\"': '\\\\\"',\n    '\\'': '\\\\\\'',\n    '\\\\': '\\\\\\\\',\n    '\\b': '\\\\b',\n    '\\f': '\\\\f',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',\n    '\\t': '\\\\t' // `\\v` is omitted intentionally, because in IE < 9, '\\v' == 'v'.\n    // '\\v': '\\\\x0B'\n\n  };\n  var regexSingleEscape = /[\"'\\\\\\b\\f\\n\\r\\t]/;\n  var regexDigit = /[0-9]/;\n  var regexWhitelist = /[ !#-&\\(-\\[\\]-~]/;\n\n  var jsesc = function jsesc(argument, options) {\n    // Handle options\n    var defaults = {\n      'escapeEverything': false,\n      'quotes': 'single',\n      'wrap': false,\n      'es6': false,\n      'json': false,\n      'compact': true,\n      'indent': '\\t',\n      '__indent__': ''\n    };\n    var json = options && options.json;\n\n    if (json) {\n      defaults.quotes = 'double';\n      defaults.wrap = true;\n    }\n\n    options = extend(defaults, options);\n\n    if (options.quotes != 'single' && options.quotes != 'double') {\n      options.quotes = 'single';\n    }\n\n    var quote = options.quotes == 'double' ? '\"' : '\\'';\n    var compact = options.compact;\n    var indent = options.indent;\n    var oldIndent;\n    var newLine = compact ? '' : '\\n';\n    var result;\n    var isEmpty = true;\n\n    if (json && argument && isFunction(argument.toJSON)) {\n      argument = argument.toJSON();\n    }\n\n    if (!isString(argument)) {\n      if (isArray(argument)) {\n        result = [];\n        options.wrap = true;\n        oldIndent = options.__indent__;\n        indent += oldIndent;\n        options.__indent__ = indent;\n        forEach(argument, function (value) {\n          isEmpty = false;\n          result.push((compact ? '' : indent) + jsesc(value, options));\n        });\n\n        if (isEmpty) {\n          return '[]';\n        }\n\n        return '[' + newLine + result.join(',' + newLine) + newLine + (compact ? '' : oldIndent) + ']';\n      } else if (!isObject(argument)) {\n        if (json) {\n          // For some values (e.g. `undefined`, `function` objects),\n          // `JSON.stringify(value)` returns `undefined` (which isn’t valid\n          // JSON) instead of `'null'`.\n          return JSON.stringify(argument) || 'null';\n        }\n\n        return String(argument);\n      } else {\n        // it’s an object\n        result = [];\n        options.wrap = true;\n        oldIndent = options.__indent__;\n        indent += oldIndent;\n        options.__indent__ = indent;\n        forOwn(argument, function (key, value) {\n          isEmpty = false;\n          result.push((compact ? '' : indent) + jsesc(key, options) + ':' + (compact ? '' : ' ') + jsesc(value, options));\n        });\n\n        if (isEmpty) {\n          return '{}';\n        }\n\n        return '{' + newLine + result.join(',' + newLine) + newLine + (compact ? '' : oldIndent) + '}';\n      }\n    }\n\n    var string = argument; // Loop over each code unit in the string and escape it\n\n    var index = -1;\n    var length = string.length;\n    var first;\n    var second;\n    var codePoint;\n    result = '';\n\n    while (++index < length) {\n      var character = string.charAt(index);\n\n      if (options.es6) {\n        first = string.charCodeAt(index);\n\n        if ( // check if it’s the start of a surrogate pair\n        first >= 0xD800 && first <= 0xDBFF && // high surrogate\n        length > index + 1 // there is a next code unit\n        ) {\n            second = string.charCodeAt(index + 1);\n\n            if (second >= 0xDC00 && second <= 0xDFFF) {\n              // low surrogate\n              // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n              codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n              result += \"\\\\u{\" + codePoint.toString(16).toUpperCase() + '}';\n              index++;\n              continue;\n            }\n          }\n      }\n\n      if (!options.escapeEverything) {\n        if (regexWhitelist.test(character)) {\n          // It’s a printable ASCII character that is not `\"`, `'` or `\\`,\n          // so don’t escape it.\n          result += character;\n          continue;\n        }\n\n        if (character == '\"') {\n          result += quote == character ? '\\\\\"' : character;\n          continue;\n        }\n\n        if (character == '\\'') {\n          result += quote == character ? '\\\\\\'' : character;\n          continue;\n        }\n      }\n\n      if (character == '\\0' && !json && !regexDigit.test(string.charAt(index + 1))) {\n        result += '\\\\0';\n        continue;\n      }\n\n      if (regexSingleEscape.test(character)) {\n        // no need for a `hasOwnProperty` check here\n        result += singleEscapes[character];\n        continue;\n      }\n\n      var charCode = character.charCodeAt(0);\n      var hexadecimal = charCode.toString(16).toUpperCase();\n      var longhand = hexadecimal.length > 2 || json;\n      var escaped = '\\\\' + (longhand ? 'u' : 'x') + ('0000' + hexadecimal).slice(longhand ? -4 : -2);\n      result += escaped;\n      continue;\n    }\n\n    if (options.wrap) {\n      result = quote + result + quote;\n    }\n\n    return result;\n  };\n\n  jsesc.version = '0.5.0';\n  /*--------------------------------------------------------------------------*/\n  // Some AMD build optimizers, like r.js, check for specific condition patterns\n  // like the following:\n\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    define(function () {\n      return jsesc;\n    });\n  } else if (freeExports && !freeExports.nodeType) {\n    if (freeModule) {\n      // in Node.js or RingoJS v0.8.0+\n      freeModule.exports = jsesc;\n    } else {\n      // in Narwhal or RingoJS v0.7.0-\n      freeExports.jsesc = jsesc;\n    }\n  } else {\n    // in Rhino or a web browser\n    root.jsesc = jsesc;\n  }\n})(this);","map":null,"metadata":{},"sourceType":"script"}
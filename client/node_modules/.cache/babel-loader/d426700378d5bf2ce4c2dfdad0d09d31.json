{"ast":null,"code":"/**\n * Module Dependencies\n */\nvar debug = require('debug')('nightmare:actions');\n\nvar sliced = require('sliced');\n\nvar jsesc = require('jsesc');\n\nvar isArray = Array.isArray;\n\nvar once = require('once');\n\nvar fs = require('fs');\n\nvar keys = Object.keys;\n/**\n * Get the version info for Nightmare, Electron and Chromium.\n * @param {Function} done\n */\n\nexports.engineVersions = function (done) {\n  debug('.engineVersions()');\n  done(null, this.engineVersions);\n};\n/**\n * Get the title of the page.\n *\n * @param {Function} done\n */\n\n\nexports.title = function (done) {\n  debug('.title() getting it');\n  this.evaluate_now(function () {\n    return document.title;\n  }, done);\n};\n/**\n * Get the url of the page.\n *\n * @param {Function} done\n */\n\n\nexports.url = function (done) {\n  debug('.url() getting it');\n  this.evaluate_now(function () {\n    return document.location.href;\n  }, done);\n};\n/**\n * Get the path of the page.\n *\n * @param {Function} done\n */\n\n\nexports.path = function (done) {\n  debug('.path() getting it');\n  this.evaluate_now(function () {\n    return document.location.pathname;\n  }, done);\n};\n/**\n * Determine if a selector is visible on a page.\n *\n * @param {String} selector\n * @param {Function} done\n */\n\n\nexports.visible = function (selector, done) {\n  debug('.visible() for ' + selector);\n  this.evaluate_now(function (selector) {\n    var elem = document.querySelector(selector);\n    if (elem) return elem.offsetWidth > 0 && elem.offsetHeight > 0;else return false;\n  }, done, selector);\n};\n/**\n * Determine if a selector exists on a page.\n *\n * @param {String} selector\n * @param {Function} done\n */\n\n\nexports.exists = function (selector, done) {\n  debug('.exists() for ' + selector);\n  this.evaluate_now(function (selector) {\n    return document.querySelector(selector) !== null;\n  }, done, selector);\n};\n/**\n * Click an element.\n *\n * @param {String} selector\n * @param {Function} done\n */\n\n\nexports.click = function (selector, done) {\n  debug('.click() on ' + selector);\n  this.evaluate_now(function (selector) {\n    document.activeElement.blur();\n    var element = document.querySelector(selector);\n\n    if (!element) {\n      throw new Error('Unable to find element by selector: ' + selector);\n    }\n\n    var event = document.createEvent('MouseEvent');\n    event.initEvent('click', true, true);\n    element.dispatchEvent(event);\n  }, done, selector);\n};\n/**\n * Mousedown on an element.\n *\n * @param {String} selector\n * @param {Function} done\n */\n\n\nexports.mousedown = function (selector, done) {\n  debug('.mousedown() on ' + selector);\n  this.evaluate_now(function (selector) {\n    var element = document.querySelector(selector);\n\n    if (!element) {\n      throw new Error('Unable to find element by selector: ' + selector);\n    }\n\n    var event = document.createEvent('MouseEvent');\n    event.initEvent('mousedown', true, true);\n    element.dispatchEvent(event);\n  }, done, selector);\n};\n/**\n * Mouseup on an element.\n *\n * @param {String} selector\n * @param {Function} done\n */\n\n\nexports.mouseup = function (selector, done) {\n  debug('.mouseup() on ' + selector);\n  this.evaluate_now(function (selector) {\n    var element = document.querySelector(selector);\n\n    if (!element) {\n      throw new Error('Unable to find element by selector: ' + selector);\n    }\n\n    var event = document.createEvent('MouseEvent');\n    event.initEvent('mouseup', true, true);\n    element.dispatchEvent(event);\n  }, done, selector);\n};\n/**\n * Hover over an element.\n *\n * @param {String} selector\n * @param {Function} done\n */\n\n\nexports.mouseover = function (selector, done) {\n  debug('.mouseover() on ' + selector);\n  this.evaluate_now(function (selector) {\n    var element = document.querySelector(selector);\n\n    if (!element) {\n      throw new Error('Unable to find element by selector: ' + selector);\n    }\n\n    var event = document.createEvent('MouseEvent');\n    event.initMouseEvent('mouseover', true, true);\n    element.dispatchEvent(event);\n  }, done, selector);\n};\n/**\n * Helper functions for type() and insert() to focus/blur\n * so that we trigger DOM events.\n */\n\n\nvar focusSelector = function focusSelector(done, selector) {\n  return this.evaluate_now(function (selector) {\n    document.querySelector(selector).focus();\n  }, done.bind(this), selector);\n};\n\nvar blurSelector = function blurSelector(done, selector) {\n  return this.evaluate_now(function (selector) {\n    //it is possible the element has been removed from the DOM\n    //between the action and the call to blur the element\n    var element = document.querySelector(selector);\n\n    if (element) {\n      element.blur();\n    }\n  }, done.bind(this), selector);\n};\n/**\n * Type into an element.\n *\n * @param {String} selector\n * @param {String} text\n * @param {Function} done\n */\n\n\nexports.type = function () {\n  var selector = arguments[0],\n      text,\n      done;\n\n  if (arguments.length == 2) {\n    done = arguments[1];\n  } else {\n    text = arguments[1];\n    done = arguments[2];\n  }\n\n  debug('.type() %s into %s', text, selector);\n  var self = this;\n  focusSelector.bind(this)(function (err) {\n    if (err) {\n      debug('Unable to .type() into non-existent selector %s', selector);\n      return done(err);\n    }\n\n    var blurDone = blurSelector.bind(this, done, selector);\n\n    if ((text || '') == '') {\n      this.evaluate_now(function (selector) {\n        document.querySelector(selector).value = '';\n      }, blurDone, selector);\n    } else {\n      self.child.call('type', text, blurDone);\n    }\n  }, selector);\n};\n/**\n * Insert text\n *\n * @param {String} selector\n * @param {String} text\n * @param {Function} done\n */\n\n\nexports.insert = function (selector, text, done) {\n  if (arguments.length === 2) {\n    done = text;\n    text = null;\n  }\n\n  debug('.insert() %s into %s', text, selector);\n  var child = this.child;\n  focusSelector.bind(this)(function (err) {\n    if (err) {\n      debug('Unable to .insert() into non-existent selector %s', selector);\n      return done(err);\n    }\n\n    var blurDone = blurSelector.bind(this, done, selector);\n\n    if ((text || '') == '') {\n      this.evaluate_now(function (selector) {\n        document.querySelector(selector).value = '';\n      }, blurDone, selector);\n    } else {\n      child.call('insert', text, blurDone);\n    }\n  }, selector);\n};\n/**\n * Check a checkbox, fire change event\n *\n * @param {String} selector\n * @param {Function} done\n */\n\n\nexports.check = function (selector, done) {\n  debug('.check() ' + selector);\n  this.evaluate_now(function (selector) {\n    var element = document.querySelector(selector);\n    var event = document.createEvent('HTMLEvents');\n    element.checked = true;\n    event.initEvent('change', true, true);\n    element.dispatchEvent(event);\n  }, done, selector);\n};\n/*\n * Uncheck a checkbox, fire change event\n *\n * @param {String} selector\n * @param {Function} done\n */\n\n\nexports.uncheck = function (selector, done) {\n  debug('.uncheck() ' + selector);\n  this.evaluate_now(function (selector) {\n    var element = document.querySelector(selector);\n    var event = document.createEvent('HTMLEvents');\n    element.checked = null;\n    event.initEvent('change', true, true);\n    element.dispatchEvent(event);\n  }, done, selector);\n};\n/**\n * Choose an option from a select dropdown\n *\n *\n *\n * @param {String} selector\n * @param {String} option value\n * @param {Function} done\n */\n\n\nexports.select = function (selector, option, done) {\n  debug('.select() ' + selector);\n  this.evaluate_now(function (selector, option) {\n    var element = document.querySelector(selector);\n    var event = document.createEvent('HTMLEvents');\n    element.value = option;\n    event.initEvent('change', true, true);\n    element.dispatchEvent(event);\n  }, done, selector, option);\n};\n/**\n * Go back to previous url.\n *\n * @param {Function} done\n */\n\n\nexports.back = function (done) {\n  debug('.back()');\n  this.evaluate_now(function () {\n    window.history.back();\n  }, done);\n};\n/**\n * Go forward to previous url.\n *\n * @param {Function} done\n */\n\n\nexports.forward = function (done) {\n  debug('.forward()');\n  this.evaluate_now(function () {\n    window.history.forward();\n  }, done);\n};\n/**\n * Refresh the current page.\n *\n * @param {Function} done\n */\n\n\nexports.refresh = function (done) {\n  debug('.refresh()');\n  this.evaluate_now(function () {\n    window.location.reload();\n  }, done);\n};\n/**\n * Wait\n *\n * @param {...} args\n */\n\n\nexports.wait = function () {\n  var args = sliced(arguments);\n  var done = args[args.length - 1];\n\n  if (args.length < 2) {\n    debug('Not enough arguments for .wait()');\n    return done();\n  }\n\n  var arg = args[0];\n\n  if (typeof arg === 'number') {\n    debug('.wait() for ' + arg + 'ms');\n\n    if (arg < this.options.waitTimeout) {\n      waitms(arg, done);\n    } else {\n      waitms(this.options.waitTimeout, function () {\n        done(new Error('.wait() timed out after ' + this.options.waitTimeout + 'msec'));\n      }.bind(this));\n    }\n  } else if (typeof arg === 'string') {\n    var timeout = null;\n\n    if (typeof args[1] === 'number') {\n      timeout = args[1];\n    }\n\n    debug('.wait() for ' + arg + ' element' + (timeout ? ' or ' + timeout + 'msec' : ''));\n    waitelem.apply({\n      timeout: timeout\n    }, [this, arg, done]);\n  } else if (typeof arg === 'function') {\n    debug('.wait() for fn');\n    args.unshift(this);\n    waitfn.apply(this, args);\n  } else {\n    done();\n  }\n};\n/**\n * Wait for a specififed amount of time.\n *\n * @param {Number} ms\n * @param {Function} done\n */\n\n\nfunction waitms(ms, done) {\n  setTimeout(done, ms);\n}\n/**\n * Wait for a specified selector to exist.\n *\n * @param {Nightmare} self\n * @param {String} selector\n * @param {Function} done\n */\n\n\nfunction waitelem(self, selector, done) {\n  var elementPresent;\n  eval(\"elementPresent = function() {\" + \"  var element = document.querySelector('\" + jsesc(selector) + \"');\" + \"  return (element ? true : false);\" + \"};\");\n  waitfn.apply(this, [self, elementPresent, done]);\n}\n/**\n * Wait until evaluated function returns true.\n *\n * @param {Nightmare} self\n * @param {Function} fn\n * @param {...} args\n * @param {Function} done\n */\n\n\nfunction waitfn() {\n  var softTimeout = this.timeout || null;\n  var executionTimer;\n  var softTimeoutTimer;\n  var self = arguments[0];\n  var args = sliced(arguments);\n  var done = args[args.length - 1];\n  var timeoutTimer = setTimeout(function () {\n    clearTimeout(executionTimer);\n    clearTimeout(softTimeoutTimer);\n    done(new Error(\".wait() timed out after \".concat(self.options.waitTimeout, \"msec\")));\n  }, self.options.waitTimeout);\n  return tick.apply(this, arguments);\n\n  function tick(self, fn\n  /**, arg1, arg2..., done**/\n  ) {\n    if (softTimeout) {\n      softTimeoutTimer = setTimeout(function () {\n        clearTimeout(executionTimer);\n        clearTimeout(timeoutTimer);\n        done();\n      }, softTimeout);\n    }\n\n    var waitDone = function waitDone(err, result) {\n      if (result) {\n        clearTimeout(timeoutTimer);\n        clearTimeout(softTimeoutTimer);\n        return done();\n      } else if (err) {\n        clearTimeout(timeoutTimer);\n        clearTimeout(softTimeoutTimer);\n        return done(err);\n      } else {\n        executionTimer = setTimeout(function () {\n          tick.apply(self, args);\n        }, self.options.pollInterval);\n      }\n    };\n\n    var newArgs = [fn, waitDone].concat(args.slice(2, -1));\n    self.evaluate_now.apply(self, newArgs);\n  }\n}\n/**\n * Execute a function on the page.\n *\n * @param {Function} fn\n * @param {...} args\n * @param {Function} done\n */\n\n\nexports.evaluate = function (fn\n/**, arg1, arg2..., done**/\n) {\n  var args = sliced(arguments);\n  var done = args[args.length - 1];\n  var self = this;\n\n  var newDone = function newDone() {\n    clearTimeout(timeoutTimer);\n    done.apply(self, arguments);\n  };\n\n  var newArgs = [fn, newDone].concat(args.slice(1, -1));\n\n  if (typeof fn !== 'function') {\n    return done(new Error('.evaluate() fn should be a function'));\n  }\n\n  debug('.evaluate() fn on the page');\n  var timeoutTimer = setTimeout(function () {\n    done(new Error(\"Evaluation timed out after \".concat(self.options.executionTimeout, \"msec.  Are you calling done() or resolving your promises?\")));\n  }, self.options.executionTimeout);\n  this.evaluate_now.apply(this, newArgs);\n};\n/**\n * Inject a JavaScript or CSS file onto the page\n *\n * @param {String} type\n * @param {String} file\n * @param {Function} done\n */\n\n\nexports.inject = function (type, file, done) {\n  debug('.inject()-ing a file');\n\n  if (type === 'js') {\n    var js = fs.readFileSync(file, {\n      encoding: 'utf-8'\n    });\n\n    this._inject(js, done);\n  } else if (type === 'css') {\n    var css = fs.readFileSync(file, {\n      encoding: 'utf-8'\n    });\n    this.child.call('css', css, done);\n  } else {\n    debug('unsupported file type in .inject()');\n    done();\n  }\n};\n/**\n * Set the viewport.\n *\n * @param {Number} width\n * @param {Number} height\n * @param {Function} done\n */\n\n\nexports.viewport = function (width, height, done) {\n  debug('.viewport()');\n  this.child.call('size', width, height, done);\n};\n/**\n * Set the useragent.\n *\n * @param {String} useragent\n * @param {Function} done\n */\n\n\nexports.useragent = function (useragent, done) {\n  debug('.useragent() to ' + useragent);\n  this.child.call('useragent', useragent, done);\n};\n/**\n * Set the scroll position.\n *\n * @param {Number} x\n * @param {Number} y\n * @param {Function} done\n */\n\n\nexports.scrollTo = function (y, x, done) {\n  debug('.scrollTo()');\n  this.evaluate_now(function (y, x) {\n    window.scrollTo(x, y);\n  }, done, y, x);\n};\n/**\n * Take a screenshot.\n *\n * @param {String} path\n * @param {Object} clip\n * @param {Function} done\n */\n\n\nexports.screenshot = function (path, clip, done) {\n  debug('.screenshot()');\n\n  if (typeof path === 'function') {\n    done = path;\n    clip = undefined;\n    path = undefined;\n  } else if (typeof clip === 'function') {\n    done = clip;\n    clip = typeof path === 'string' ? undefined : path;\n    path = typeof path === 'string' ? path : undefined;\n  }\n\n  this.child.call('screenshot', path, clip, function (error, img) {\n    var buf = new Buffer(img.data);\n    debug('.screenshot() captured with length %s', buf.length);\n    path ? fs.writeFile(path, buf, done) : done(null, buf);\n  });\n};\n/**\n * Save the current file as html to disk.\n *\n * @param {String} path the full path to the file to save to\n * @param {String} saveType\n * @param {Function} done\n */\n\n\nexports.html = function (path, saveType, done) {\n  debug('.html()');\n\n  if (typeof path === 'function' && !saveType && !done) {\n    done = path;\n    saveType = undefined;\n    path = undefined;\n  } else if (typeof path === 'object' && typeof saveType === 'function' && !done) {\n    done = saveType;\n    saveType = path;\n    path = undefined;\n  } else if (typeof saveType === 'function' && !done) {\n    done = saveType;\n    saveType = undefined;\n  }\n\n  this.child.call('html', path, saveType, function (error) {\n    if (error) debug(error);\n    done(error);\n  });\n};\n/**\n * Take a pdf.\n *\n * @param {String} path\n * @param {Function} done\n */\n\n\nexports.pdf = function (path, options, done) {\n  debug('.pdf()');\n\n  if (typeof path === 'function' && !options && !done) {\n    done = path;\n    options = undefined;\n    path = undefined;\n  } else if (typeof path === 'object' && typeof options === 'function' && !done) {\n    done = options;\n    options = path;\n    path = undefined;\n  } else if (typeof options === 'function' && !done) {\n    done = options;\n    options = undefined;\n  }\n\n  this.child.call('pdf', path, options, function (error, pdf) {\n    if (error) debug(error);\n    var buf = new Buffer(pdf.data);\n    debug('.pdf() captured with length %s', buf.length);\n    path ? fs.writeFile(path, buf, done) : done(null, buf);\n  });\n};\n/**\n * Get and set cookies\n *\n * @param {String} name\n * @param {Mixed} value (optional)\n * @param {Function} done\n */\n\n\nexports.cookies = {};\n/**\n * Get a cookie\n */\n\nexports.cookies.get = function (name, done) {\n  debug('cookies.get()');\n  var query = {};\n\n  switch (arguments.length) {\n    case 2:\n      query = typeof name === 'string' ? {\n        name: name\n      } : name;\n      break;\n\n    case 1:\n      done = name;\n      break;\n  }\n\n  this.child.call('cookie.get', query, done);\n};\n/**\n * Set a cookie\n */\n\n\nexports.cookies.set = function (name, value, done) {\n  debug('cookies.set()');\n  var cookies = [];\n\n  switch (arguments.length) {\n    case 3:\n      cookies.push({\n        name: name,\n        value: value\n      });\n      break;\n\n    case 2:\n      cookies = [].concat(name);\n      done = value;\n      break;\n\n    case 1:\n      done = name;\n      break;\n  }\n\n  this.child.call('cookie.set', cookies, done);\n};\n/**\n * Clear a cookie\n */\n\n\nexports.cookies.clear = function (name, done) {\n  debug('cookies.clear()');\n  var cookies = [];\n\n  switch (arguments.length) {\n    case 2:\n      cookies = [].concat(name);\n      break;\n\n    case 1:\n      done = name;\n      break;\n  }\n\n  this.child.call('cookie.clear', cookies, done);\n};\n/**\n * Clear all cookies\n */\n\n\nexports.cookies.clearAll = function (done) {\n  this.child.call('cookie.clearAll', done);\n};\n/**\n * Authentication\n */\n\n\nexports.authentication = function (login, password, done) {\n  debug('.authentication()');\n  this.child.call('authentication', login, password, done);\n};","map":null,"metadata":{},"sourceType":"script"}
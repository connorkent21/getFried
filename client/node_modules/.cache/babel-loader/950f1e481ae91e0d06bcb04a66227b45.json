{"ast":null,"code":"'use strict';\n\nvar request = require('request'),\n    cheerio = require('cheerio'),\n    Promise = require('bluebird'),\n    Nightmare = require('nightmare'),\n    RateLimiter = require('limiter').RateLimiter,\n    EventEmitter = require('events'),\n    util = require('util');\n\nfunction Scraper() {\n  EventEmitter.call(this);\n}\n\nutil.inherits(Scraper, EventEmitter);\n/**\n * Get the image src for images, options specify the details.\n */\n\nScraper.prototype.list = function (options) {\n  var self = this;\n  if (!options || !options.keyword) return Promise.reject(new Error('no keyword provided'));\n  this.keyword = options.keyword;\n  this.rlimit = new RateLimiter(options.rlimit || 0, 'second');\n  this.userAgent = options.userAgent || 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36';\n  this.noptions = options.nightmare || {};\n  this.timeout = options.timeout || 10000;\n  this.advanced = options.advanced;\n  return self._links().then(function (res) {\n    if (options.num) {\n      res = res.slice(0, options.num);\n    }\n\n    res.filter(function (r) {\n      return r !== null;\n    });\n    self.emit('end', res);\n    return res;\n  });\n};\n/**\n * Returns a complete list of all the image details.\n */\n\n\nScraper.prototype._links = function () {\n  var self = this;\n  var search_base = 'https://www.google.com/search?q=%&source=lnms&tbm=isch&sa=X';\n\n  if (this.advanced) {\n    var base = '&tbs=';\n    var build = [];\n\n    if (this.advanced.resolution) {\n      build.push('isz:' + this.advanced.resolution);\n    }\n\n    if (this.advanced.imgType) {\n      build.push('itp:' + this.advanced.imgType);\n    }\n\n    if (this.advanced.color) {\n      build.push('ic:' + this.advanced.color);\n    }\n\n    build = build.length > 1 ? build.join(',') : build[0];\n    search_base += '&tbs=' + build;\n  }\n\n  return new Promise.resolve(new Nightmare(self.noptions).useragent(self.userAgent).goto(search_base.replace('%', encodeURIComponent(self.keyword))).wait().inject('js', __dirname + '/jquery-2.1.4.min.js').evaluate(function (timeout) {\n    $.data(document, 'timeout', false);\n    setTimeout(function () {\n      $.data(document, 'timeout', true);\n    }, timeout);\n    setInterval(function () {\n      $('html, body').animate({\n        scrollTop: $(document).height()\n      }, 1000);\n      var button = $('.ksb._kvc'); // try to load more\n\n      if (button) {\n        $.data(document, 'finished', false);\n        button.click();\n      }\n    }, 1000); // catch all AJAX events such that we can determine when we are finished\n\n    var oldSend = XMLHttpRequest.prototype.send;\n\n    XMLHttpRequest.prototype.send = function () {\n      var oldOnReady = this.onreadystatechange;\n\n      this.onreadystatechange = function () {\n        oldOnReady.call(this);\n        if (this.readyState === XMLHttpRequest.DONE) $.data(document, 'finished', true);\n      };\n\n      oldSend.apply(this, arguments);\n    };\n  }, self.timeout).wait(function () {\n    return $(window).scrollTop() + $(window).height() == $(document).height() && !$('.ksb._kvc').is(':visible') && $.data(document, 'finished') || $.data(document, 'timeout');\n  }).evaluate(function () {\n    // get all the src's\n    var results = [];\n    $('.rg_l').each(function () {\n      var meta = JSON.parse($(this).parent().find('.rg_meta').text());\n      var item = {\n        type: 'image/' + meta.ity,\n        width: meta.ow,\n        height: meta.oh,\n        // size: meta.os.match(/[-+]?(\\d*[.])?\\d+/)[0], // fails query as property no longer exists\n        url: meta.ou,\n        thumb_url: meta.tu,\n        thumb_width: meta.tw,\n        thumb_height: meta.th // unit: meta.os.match(/\\D+/).slice(-1)[0] // fails query as property no longer exists\n\n      };\n      results.push(item);\n    });\n    return results;\n  }).end());\n};\n\nmodule.exports = Scraper;","map":null,"metadata":{},"sourceType":"script"}
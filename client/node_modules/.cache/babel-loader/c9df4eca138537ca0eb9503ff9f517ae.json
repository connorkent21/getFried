{"ast":null,"code":"/**\n * Expose `render()`.`\n */\nexports = module.exports = render;\n/**\n * Expose `compile()`.\n */\n\nexports.compile = compile;\n/**\n * Render the given mustache `str` with `obj`.\n *\n * @param {String} str\n * @param {Object} obj\n * @return {String}\n * @api public\n */\n\nfunction render(str, obj) {\n  obj = obj || {};\n  var fn = compile(str);\n  return fn(obj);\n}\n/**\n * Compile the given `str` to a `Function`.\n *\n * @param {String} str\n * @return {Function}\n * @api public\n */\n\n\nfunction compile(str) {\n  var js = [];\n  var toks = parse(str);\n  var tok;\n\n  for (var i = 0; i < toks.length; ++i) {\n    tok = toks[i];\n\n    if (i % 2 == 0) {\n      js.push('\"' + tok.replace(/\"/g, '\\\\\"') + '\"');\n    } else {\n      switch (tok[0]) {\n        case '/':\n          tok = tok.slice(1);\n          js.push(' }) + ');\n          break;\n\n        case '^':\n          tok = tok.slice(1);\n          assertProperty(tok);\n          js.push(' + section(obj, \"' + tok + '\", true, function(obj){ return ');\n          break;\n\n        case '#':\n          tok = tok.slice(1);\n          assertProperty(tok);\n          js.push(' + section(obj, \"' + tok + '\", false, function(obj){ return ');\n          break;\n\n        case '!':\n          tok = tok.slice(1);\n          assertProperty(tok);\n          js.push(' + obj.' + tok + ' + ');\n          break;\n\n        default:\n          assertProperty(tok);\n          js.push(' + escape(obj.' + tok + ') + ');\n      }\n    }\n  }\n\n  js = '\\n' + indent(escape.toString()) + ';\\n\\n' + indent(section.toString()) + ';\\n\\n' + '  return ' + js.join('').replace(/\\n/g, '\\\\n');\n  return new Function('obj', js);\n}\n/**\n * Assert that `prop` is a valid property.\n *\n * @param {String} prop\n * @api private\n */\n\n\nfunction assertProperty(prop) {\n  if (!prop.match(/^[\\w.]+$/)) throw new Error('invalid property \"' + prop + '\"');\n}\n/**\n * Parse `str`.\n *\n * @param {String} str\n * @return {Array}\n * @api private\n */\n\n\nfunction parse(str) {\n  return str.split(/\\{\\{|\\}\\}/);\n}\n/**\n * Indent `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\n\nfunction indent(str) {\n  return str.replace(/^/gm, '  ');\n}\n/**\n * Section handler.\n *\n * @param {Object} context obj\n * @param {String} prop\n * @param {Function} thunk\n * @param {Boolean} negate\n * @api private\n */\n\n\nfunction section(obj, prop, negate, thunk) {\n  var val = obj[prop];\n  if (Array.isArray(val)) return val.map(thunk).join('');\n  if ('function' == typeof val) return val.call(obj, thunk(obj));\n  if (negate) val = !val;\n  if (val) return thunk(obj);\n  return '';\n}\n/**\n * Escape the given `html`.\n *\n * @param {String} html\n * @return {String}\n * @api private\n */\n\n\nfunction escape(html) {\n  return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar request = require('request'),\n    cheerio = require('cheerio'),\n    Promise = require('bluebird'),\n    EventEmitter = require('events'),\n    util = require('util');\n\nfunction Scraper() {\n  EventEmitter.call(this);\n}\n\nutil.inherits(Scraper, EventEmitter);\n/**\n * Get the image src for all links, options.keyword is required.\n */\n\nScraper.prototype.list = function (options) {\n  var self = this;\n  if (!options || !options.keyword) return Promise.reject(new Error('no keyword provided'));\n  var base = 'http://www.picsearch.com'; // define options\n\n  this.roptions = {\n    'url': base + '/index.cgi?q=%'.replace('%', encodeURIComponent(options.keyword)),\n    'User-Agent': options.userAgent || 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36'\n  };\n  var result = [],\n      num = options.num || 2000; // max it to 2000 for default because we can go on indefinitely\n\n  var nextPage = function nextPage(url) {\n    return new Promise(function (resolve) {\n      self.roptions.url = url;\n      request(self.roptions, function (err, response, body) {\n        if (!err && response.statusCode === 200) {\n          var $ = cheerio.load(body); // no results\n\n          if (!$('.result').length) {\n            return resolve(result);\n          }\n\n          $('.result').each(function () {\n            result.push(base + $(this).find('a').attr('href'));\n          });\n\n          if (num && result.length > num) {\n            return resolve(result.slice(0, num));\n          } // search for current page and select next one\n\n\n          var page = $('#nextPage').attr('href');\n\n          if (page) {\n            resolve(nextPage(base + page));\n          } else {\n            resolve(result);\n          }\n        } else {\n          resolve(result);\n        }\n      });\n    });\n  };\n\n  return nextPage(self.roptions.url).then(function (res) {\n    return Promise.mapSeries(res, function (r) {\n      return self._extract(r);\n    }).then(function (details) {\n      var result = details.filter(function (d) {\n        return d !== undefined;\n      });\n      self.emit('end', result);\n      return result;\n    });\n  });\n};\n/**\n * Extract the original image and details from a target link.\n */\n\n\nScraper.prototype._extract = function (item) {\n  var self = this;\n  self.roptions.url = item;\n  return new Promise(function (resolve, reject) {\n    request(self.roptions, function (err, response, body) {\n      if (!err && response.statusCode === 200) {\n        var $ = cheerio.load(body);\n        var detail = $('.detail-links p').eq(1).html().split('<br>')[1].trim();\n        var url = $('.thumbnailDetails a[rel=\"nofollow\"]').attr('href');\n\n        try {\n          var item = {\n            url: url,\n            thumb: $('a[rel=\"nofollow\"] img').attr('src'),\n            width: detail.split('x')[0],\n            height: detail.split('x')[1].split(',')[0],\n            // regex vs. split\n            format: url.match(/[0-9a-z]+$/i)[0],\n            // guess the format from the url\n            size: detail.split(',')[1].match(/[-+]?(\\d*[.])?\\d+/)[0],\n            unit: detail.split(',')[1].match(/[^\\d]\\D+/)[0]\n          };\n          self.emit('result', item);\n          resolve(item);\n        } catch (err) {\n          resolve(); // silently die\n        }\n      } else resolve(); // empty response, don't fail\n\n    });\n  });\n};\n\nmodule.exports = Scraper;","map":null,"metadata":{},"sourceType":"script"}